// DAZ Studio version 4.21.0.5 filetype DAZ Script

// get script file path using dzscript
var sScriptPath = new DzFileInfo(getScriptFileName()).path();
var sRootFolder = ""
var sExportFolder = ""
var sGodotProjectFolderPath = ""
var sBlenderExecutablePath = ""
var sGeograftFilePath = ""	

// platform specific paths
if (App.platform() == 0)
{
	sRootFolder = "C:/CustomRoot"
	sExportFolder = "CustomFolder"
	sGodotProjectFolderPath = "C:/CustomRoot/FinalOutput"
	sBlenderExecutablePath = "C:/Program Files/Blender Foundation/Blender 3.6/blender.exe"
	sGeograftFilePath = "C:/dev/TopSecret/g9 geograft arms.duf"	
}
else if (App.platform() == 1)
{
	sRootFolder = "/Volumes/SSD_2TB/Top Secret Project/Intermediate"
	sExportFolder = "Test"
	sGodotProjectFolderPath = "/Volumes/SSD_2TB/Top Secret Project/FinalOutput"
	sBlenderExecutablePath = "/Applications/Blender 3.6.app/Contents/MacOS/Blender"
	sGeograftFilePath = sScriptPath + "/G9 geograft arms.duf"	
}

function Run_Exporter2(oBridge, sExportFilename, sAssetType, sRootFolder, sExportFolder, sProductName, sComponentName, arrayMorphList)
{
	var obj = oBridge;
	obj.setNonInteractiveMode(1);

	// obj.UseRelativePaths: set true for relative Daz Library runtime paths
	//                       set false for absolute filepath
	// Default to true to work with interactive mode
	obj.setUseRelativePaths(false);
	// obj.UseRelativePaths = true;

	// obj.ExportFilename: filename stem for DTU and FBX file
	// Can not have spaces or hyphen.  Underscore is OK
	// Leave blank to default to sanitized Scene Node Label
	if (sExportFilename != "")
	{
		obj.setExportFilename(sExportFilename);
	}

	// obj.AssetType: "SkeletalMesh" [DEFAULT], "StaticMesh", "Animation", "Environment", "Pose"
	if (sAssetType != "")
	{
		obj.setAssetType(sAssetType);
	}

	// obj.RootFolder: path to destination root
	// If folder or path doesn't exist, it will be created
	if (sRootFolder != "")
	{
		obj.setRootFolder(sRootFolder);
	}

	// obj.ExportFolder: name folder containing DTU/FBX
	// Leave blank to default to sanitized Scene Node Label like ExportFilename
	if (sExportFolder != "")
	{
		obj.setExportFolder(sExportFolder);
	}

	// obj.ProductName: Daz Store Product Name (or anything you want), can have spaces & special characters
	if (sProductName != "")
	{
		obj.setProductName(sProductName);
	}

	// obj.ProductComponentName: Friendly Name for component within Product
	// Put frienldy pose name or material name here
	if (sComponentName != "")
	{
		obj.setProductComponentName(sComponentName);
	}

	// obj.MorphList: String array of morphs to convert into blendshapes within FBX.
	// Leave empty if you do not want to export any blendshapes.
	//obj.MorphList = ["CTRLVictoria8_1", "FHMVictoria8_1", "FBMVictoria8_1"]
	if (arrayMorphList.length > 0)
	{
		obj.setMorphList(arrayMorphList);
	}

	obj.setGenerateNormalMaps(true);

	obj.executeAction()

	var sReturnString = obj.getRootFolder() + "/" + obj.getExportFolder() + "/" + obj.getExportFilename() + ".dtu"

	return sReturnString;
}

function do_job(relative_asset_path)
{
	// if sGodotProjectFolderPath does not exist, create it
	var oGodotProjectFolder = new DzDir(sGodotProjectFolderPath);
	if (!oGodotProjectFolder.exists())
	{
		oGodotProjectFolder.mkpath(".");
	}

	App.log("DEBUG: exporting asset: " + relative_asset_path);	

	var obj = DzGodotAction()
	sExportFilename = ""
	sAssetType = "Godot_Glb"
	sProductName = ""
	sComponentName = ""
	arrayMorphList = []

	if (App.platform() != 0 && App.platform() != 1)
	{
		print("ERROR: unknown platform, aborting.");
		return;
	}

	// For next dzbridge version
//	bGenerateNormalMaps = true

	Scene.clear()
	Scene.setPrimarySelection(0);

	// reset bridge after clearing scene
	obj.resetToDefaults();
	obj.setGodotProjectFolderPath(sGodotProjectFolderPath)
	obj.setBlenderExecutablePath(sBlenderExecutablePath)

	var oContentMgr = App.getContentMgr()

	// add base figure
	var sFullPath = oContentMgr.findFile(relative_asset_path)
	oContentMgr.openFile(sFullPath)

	// get selection
	var pNode = Scene.getSelectedNode(0)

	// loop through and delete all attached children (except bones)
	var aChildren = pNode.getNodeChildren()
	for (j=0; j < aChildren.length; j++)
	{
		var pChild = aChildren[j]
		if (pChild.inherits("DzFigure") == true)
		{
			// remove child from scene
			pChild.setVisible(false);
			pChild.setFollowTarget(0);
			print("DEBUG: child to hide name = " + pChild.getLabel() + ", from class = " + pChild.className())
			pNode.removeNodeChild(pChild);
		}
		else
		{
			print("DEBUG: child to skip name = " + pChild.getLabel() + ", from class = " + pChild.className())
		}
	}

	// merge arm geograft
	print("DEBUG: sGeograftFilePath = " + sGeograftFilePath);
	var sFullPath = oContentMgr.findFile(sGeograftFilePath)
	if (sFullPath == "")
	{
		sFullPath = sGeograftFilePath;
	}
	print("DEBUG: sFullPath = " + sFullPath);
	result = oContentMgr.openFile(sFullPath, true)
	if (result)
	{
		geograft_node = Scene.findNodeByLabel("G9 arm geografts");
		pNode.addNodeChild(geograft_node);
		geograft_node.setFollowTarget(pNode.getSkeleton());
		print("geografted successfully");
	}
	else
	{
		print("geografting failed");
	}

	sAssetName = obj.cleanString(pNode.getLabel())

	Run_Exporter2(obj, "", sAssetType, sRootFolder, sExportFolder, sProductName, sComponentName, arrayMorphList);
	obj.deleteLater();
	obj = 0;
}

function main()
{

	// Load string list from newline separated file
	var sFilename = sScriptPath + "/automation.joblist";
	// use Daz Script to read file
	var oFile = new DzFile(sFilename)
	if (!oFile.open(DzFile.ReadOnly))
	{
		print("ERROR reading file: " + sFilename);
		return;
	}
	// read entire contents and split by new line or comma
	var aFileContents = oFile.readLines()

	// loop through each line
	var aRelativePath = new Array();
	for (i=0; i < aFileContents.length; i++)
	{
		// print line for debugging
		// store line in variable and strip newline and quotes
		var cleaned_line = aFileContents[i].replace(/(\r\n|\n|\r)/gm, "");
		// add to array
		if (cleaned_line != "")
		{
			print("DEBUG: line " + i + " = " + cleaned_line)
			aRelativePath.push(cleaned_line);
		}
	}
	
	for (i=0; i < aRelativePath.length; i++)
	{
		do_job(aRelativePath[i]);
	}
	
}

main();