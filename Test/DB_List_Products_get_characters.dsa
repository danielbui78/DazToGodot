// DAZ Studio version 4.22.0.1 filetype DAZ Script

/**********************************************************************
 
	This script is provided as part of the Daz Script Documentation. The
	contents of this script, and\or any portion thereof, may only be used
	in accordance with the following license:
 
	Creative Commons Attribution 3.0 Unported (CC BY 3.0)
	- http://creativecommons.org/licenses/by/3.0
 
	To contact Daz 3D or for more information about Daz Script visit the
	Daz 3D website:
 
	- http://www.daz3d.com
 
**********************************************************************/
// Source: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/samples/metadata/list_products/start

var G_sScriptPath = new DzFileInfo(getScriptFileName()).path();
var G_aOutputBuffer = Array();

function processXml(xmlString, categorySearch, compatibilitySearch, contentTypeSearch) 
{
    var assets = []; // Array to hold matching assets
    var pos = 0; // Variable to track position in the string

    while (pos < xmlString.length) {
        var assetIndex = xmlString.indexOf("<Asset VALUE=", pos);
        if (assetIndex === -1) break; // No more <Asset> tags found

        var assetEndIndex = xmlString.indexOf("</Asset>", assetIndex) + "</Asset>".length;
        var assetString = xmlString.substring(assetIndex, assetEndIndex);

        // Search for Category within this Asset
        var categoryIndex = assetString.indexOf("<Category VALUE=\"" + categorySearch );
        var compatibilityIndex = assetString.indexOf("<Compatibility VALUE=\"" + compatibilitySearch );
        var contentTypeIndex = assetString.indexOf("<ContentType VALUE=\"" + contentTypeSearch );

        // If both Category and Compatibility are found within this Asset tag
        if (categoryIndex !== -1 && compatibilityIndex !== -1 && contentTypeIndex !== -1) {
//        	print("I found it!");
//        	print("\n\n" + assetString + "\n\n");
            assets.push(assetString); // Add the whole Asset string or just the specific VALUE
        }

        pos = assetEndIndex; // Move past this Asset
    }

    return assets; // Return array of matching assets
}

function processCategories(oProduct) {
	var aCategories = oProduct.getCategories();
	if (aCategories.length == 0) {
		return false;
	}
//	print("Container [" + oContainer.getContainerName() + "] has categories:");
	for (var i = 0; i < aCategories.length; i++) {
//		print("  " + aCategories[i]);
		if (aCategories[i] == "/Default/Figures/People") {
//			print("Product: " + oProduct.getContainerName() + "[" +oProduct.token +  "]" + " has category: " + aCategories[i]);
			return true;
		}
	}
	return false;
}

function processContainer(oContainer, oAssetMgr) {
	for (var i = 0; i < oContainer.getNumChildContainers(); i++) {
		var oChildContainer = oContainer.getChildContainer(i);
		processContainer(oChildContainer, oAssetMgr);
		if (oChildContainer.getNumChildContainers() > 0) {
			print( "Container: " + oChildContainer.getContainerName() + ", sub_containers=" + oChildContainer.getNumChildContainers());
		}
		var bIsHumanoidFigure = false;
		if (oChildContainer.inherits("DzProductAssetContainer"))
		{
			bIsHumanoidFigure = processCategories(oChildContainer);
			var bIsInstalled = oChildContainer.isInstalled;
			processProduct(oChildContainer, oAssetMgr);
		}
	}
}

function processAsset(oAsset, oAssetMgr) {
//	var categoryToFind = "/Default/Figures/People";
//	var compatibilityToFind = "/Genesis 9/Base";
	var contentTypeToFind = "Actor/Character";

	var spacer = "--";
	if (oAsset.isInstalled) {
		spacer = "++";
	}
	var aCompatibilities = oAsset.compatibilities;
//	var bIsCompatible = false;
//	for (var j = 0; j < aCompatibilities.length; j++) {
//		if (aCompatibilities[j] == compatibilityToFind) {
//			bIsCompatible = true;
//			break;
//		}
//	}
	var bIsCompatible = true;
	if (bIsCompatible && oAsset.contentType == contentTypeToFind) {
		print(spacer + "[" + oAsset.productID + "] \"" + oAsset.productName + "\", " + oAsset.originalFilename + ", (" + oAsset.contentType + ")");
		//-------------------------------------------------------------------
		var output_line = spacer + "," + oAsset.productID + "," + oAsset.productName + "," + oAsset.originalPath + "/" + oAsset.originalFilename;
		G_aOutputBuffer.push(output_line);
		//-------------------------------------------------------------------

	}

}

function processSearchContainer(oContainer, oAssetMgr) {

	for (var i = 0; i < oContainer.getNumAssets(); i++) {
		var oAsset = oContainer.getAsset(i);
		processAsset(oAsset, oAssetMgr);
	}

}

function processProduct(oProduct, oAssetMgr) {
	var totalAssets = oProduct.getNumAssets();
	if (totalAssets == 0) {
		return totalAssets;
	}

	print("DEBUG: " + oProduct.getContainerName() + " has " + totalAssets + " assets");

	var oAsset = oProduct.getAsset(0);
	var nNonActorAssets = 0;
	var sInstalled = "** NOT INSTALLED **";
	if (oProduct.isInstalled) {
		sInstalled = "__installed__";
//		return totalAssets;
	}
	else {
//		return totalAssets;		
	}

	if (!oProduct.isInstalled) {
//		var categoryToFind = "/Default/Figures/People";
		var categoryToFind = "";
//		var compatibilityToFind = "/Genesis 9/Base";
		var compatibilityToFind = "";
		var contentTypeToFind = "Actor/Character";
//		var contentTypeToFind = "";
	
		var xmlString = oProduct.getMetadataXML();
		var xmlData = xmlString;
//		print("DEBUG: xmlData = " + xmlData);
		var matchingAssets = processXml(xmlData, categoryToFind, compatibilityToFind, contentTypeToFind);
		for (var i = 0; i < matchingAssets.length; i++) {
			var assetString = matchingAssets[i];
			var assetValue = assetString.substring(assetString.indexOf("VALUE=\"") + "VALUE=\"".length);
			assetValue = assetValue.substring(0, assetValue.indexOf("\""));
			print("--[" + oProduct.token + "] \"" + oProduct.getContainerName() + "\", " + assetValue);
			//-------------------------------------------------------------------
			var output_line = "--," + oProduct.token +  "," + oProduct.getContainerName() + "," + assetValue;
			G_aOutputBuffer.push(output_line);
			//-------------------------------------------------------------------
		}
	}
	else
	{
		for (var i = 0; i < totalAssets; i++) {
			oAsset = oProduct.getAsset(i);
			if (oAsset.contentType != "Actor/Character") {
				nNonActorAssets++;
				continue;
			}
			processAsset(oAsset, oAssetMgr);
		}
	
	}

	return totalAssets;
}


// Define an anonymous function;
// serves as our main loop,
// limits the scope of variables
(function(){

	// Get the asset manager
	var oAssetMgr = App.getAssetMgr();
	// If the manager was not found
	if( !oAssetMgr ){
		// We are done...
		return;
	}

	var nDefaultMaxResults = oAssetMgr.getMaxFileSearchResultSize();
	oAssetMgr.setMaxFileSearchResultSize(10000);

	var categoryToFind = "/Default/Figures/People";
	var contentTypeToFind = "Actor/Character";

	var aCategoriesFilter = Array();
//	aCategoriesFilter.push(categoryToFind);

	var aCompatibilitiesFilter = Array();
	aCompatibilitiesFilter.push("/Genesis 9/Base");
	aCompatibilitiesFilter.push("/Genesis 8/Female");
	aCompatibilitiesFilter.push("/Genesis 8/Male");
	aCompatibilitiesFilter.push("/Genesis 8.1/Female");
	aCompatibilitiesFilter.push("/Genesis 8.1/Male");

	var aContentTypesFilter = Array();
	aContentTypesFilter.push(contentTypeToFind);

	var oProductsTop = oAssetMgr.searchForProducts("", aCategoriesFilter, aCompatibilitiesFilter, aContentTypesFilter, 0x0, 0 );
//	var oProductsTop = oAssetMgr.searchForAssets("", aCategoriesFilter, aCompatibilitiesFilter, aContentTypesFilter, 0 );
//	var oProductsTop = oAssetMgr.getProducts();

	oAssetMgr.setMaxFileSearchResultSize(nDefaultMaxResults);	

	// If we do not have the products container
	if( !oProductsTop ){
		// We are done...
		return;
	}
	
	while (oProductsTop.getState() == DzTopLevelAssetContainer.csBusy)
	{
		sleep(100);
	}

	if (oProductsTop.inherits("DzProductHolderContainer"))
	{
		print("num results = " + oProductsTop.getNumChildContainers());
		processContainer(oProductsTop, oAssetMgr);
	}
	else if (oProductsTop.inherits("DzSearchContainer"))
	{
		print("num results = " + oProductsTop.getNumAssets());
	    processSearchContainer(oProductsTop, oAssetMgr);
	}

	var oFile = DzFile(G_sScriptPath + "/output.jobs");
	oFile.open(DzFile.WriteOnly);
	for (var i=0; i < G_aOutputBuffer.length; i++)
	{
		oFile.write(G_aOutputBuffer[i] + "\n");
	}
	oFile.close();

	print("Script Completed.\n");

    return;

// Finalize the function and invoke
})();