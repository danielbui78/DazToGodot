// DAZ Studio version 4.22.0.1 filetype DAZ Script

/**********************************************************************
 
	This script is provided as part of the Daz Script Documentation. The
	contents of this script, and\or any portion thereof, may only be used
	in accordance with the following license:
 
	Creative Commons Attribution 3.0 Unported (CC BY 3.0)
	- http://creativecommons.org/licenses/by/3.0
 
	To contact Daz 3D or for more information about Daz Script visit the
	Daz 3D website:
 
	- http://www.daz3d.com
 
**********************************************************************/
// Source: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/samples/metadata/list_products/start

var G_sScriptPath = new DzFileInfo(getScriptFileName()).path();
var G_aOutputBuffer = Array();
//var categoryToFind = "/Default/Figures/People";
var categoryToFind = "";
var contentTypeToFind = "Actor/Character";

// Parse XML String and return array of asset filenames that match the search criteria
function processXml(xmlString, categorySearch, compatibilitySearch, contentTypeSearch, artistSearch) 
{
    var assets = []; // Array to hold matching assets
    var pos = 0; // Variable to track position in the string

    while (pos < xmlString.length) {
        var assetIndex = xmlString.indexOf("<Asset VALUE=", pos);
        if (assetIndex === -1) break; // No more <Asset> tags found

        var assetEndIndex = xmlString.indexOf("</Asset>", assetIndex) + "</Asset>".length;
        var assetString = xmlString.substring(assetIndex, assetEndIndex);

        // Search for Category within this Asset
        var categoryIndex = 0;
		if (categorySearch != "") {
			categoryIndex = assetString.indexOf("<Category VALUE=\"" + categorySearch );
		}
		var contentTypeIndex = 0;
		if (contentTypeSearch != "") {
			contentTypeIndex = assetString.indexOf("<ContentType VALUE=\"" + contentTypeSearch );
		}
		var compatibilityIndex = 0;
		if (compatibilitySearch != "") {
	        compatibilityIndex = assetString.indexOf("<Compatibility VALUE=\"" + compatibilitySearch );
		}
		var artistIndex = 0;
		if (artistSearch != "") {
			artistIndex = assetString.indexOf("<Artist VALUE=\"" + artistSearch );
		}

        // If both Category and Compatibility are found within this Asset tag
        if (categoryIndex !== -1 && compatibilityIndex !== -1 && contentTypeIndex !== -1) {
            assets.push(assetString); // Add the whole Asset string or just the specific VALUE
        }

        pos = assetEndIndex; // Move past this Asset
    }

    return assets; // Return array of matching assets
}

// Process an asset and add to the output buffer if it matches the search criteria
function processAsset(oAsset, oAssetMgr, aCompatibilitiesFilter) {

	var spacer = "--";
	if (oAsset.isInstalled) {
		spacer = "++";
	}
	var aCompatibilities = oAsset.compatibilities;
	var bIsCompatible = false;
	for (var i = 0; i < aCompatibilitiesFilter.length; i++) {
		for (var j = 0; j < aCompatibilities.length; j++) {
			if (aCompatibilitiesFilter[i] == aCompatibilities[j]) {
				bIsCompatible = true;
				break;
			}
		}
	}
	if (bIsCompatible && oAsset.contentType == contentTypeToFind) {
		print(spacer + "[" + oAsset.productID + "] \"" + oAsset.productName + "\", " + oAsset.originalFilename + ", (" + oAsset.contentType + ")");
		var assetValue = oAsset.originalPath + "/" + oAsset.originalFilename;
		//-------------------------------------------------------------------
		var output_line = spacer + "," + oAsset.productID + ",\"" + oAsset.productName + "\"," + assetValue;
		G_aOutputBuffer.push(output_line);
		//-------------------------------------------------------------------

	}

}

// Process a product, if not installed then use metadata, otherwise iterate through assets
function processProduct(oProduct, oAssetMgr, aCompatibilitiesFilter, aArtistsFilter) {
	var totalAssets = oProduct.getNumAssets();
	if (totalAssets == 0) {
		return totalAssets;
	}

	print("DEBUG: " + oProduct.getContainerName() + " has " + totalAssets + " assets");

	// filter assets with artist filter
	bHasMatchingArtist = false;
	for (var index_artist = 0; index_artist < aArtistsFilter.length; index_artist++)
	{
		var artistToFind = aArtistsFilter[index_artist];
		for (var i = 0; i < oProduct.artistNames.length; i++) {
			if (oProduct.artistNames[i].indexOf(artistToFind) > -1) {
				bHasMatchingArtist = true;
				break;
			}
		}
	}
	if (!bHasMatchingArtist) {
		print("DEBUG: " + oProduct.getContainerName() + " does not have matching artist");
		return totalAssets;
	}

	if (!oProduct.isInstalled) 
	{
		for (var index_artists = 0; index_artists < aArtistsFilter.length; index_artists++)
		{
			var artistToFind = aArtistsFilter[index_artists];
			for (var index_compatibilities = 0; index_compatibilities < aCompatibilitiesFilter.length; index_compatibilities++) 
			{
				var compatibilityToFind = aCompatibilitiesFilter[index_compatibilities];
		
				var xmlData = oProduct.getMetadataXML();
				var matchingAssets = processXml(xmlData, categoryToFind, compatibilityToFind, contentTypeToFind, "");
				for (var i = 0; i < matchingAssets.length; i++) 
				{
					var assetString = matchingAssets[i];
					var assetValue = assetString.substring(assetString.indexOf("VALUE=\"") + "VALUE=\"".length);
					assetValue = assetValue.substring(0, assetValue.indexOf("\""));
					print("--[" + oProduct.token + "] \"" + oProduct.getContainerName() + "\", " + assetValue);
					//-------------------------------------------------------------------
					var output_line = "--," + oProduct.token +  ",\"" + oProduct.getContainerName() + "\"," + assetValue;
					G_aOutputBuffer.push(output_line);
					//-------------------------------------------------------------------
				}
			}	
		}
	}
	else
	{
		for (var i = 0; i < totalAssets; i++) {
			var oAsset = oProduct.getAsset(i);
			processAsset(oAsset, oAssetMgr, aCompatibilitiesFilter);
		}	
	}

	return totalAssets;
}

// Process a container containing products
function processContainer(oContainer, oAssetMgr, aCompatibilitiesFilter, aArtistsFilter) {
	for (var i = 0; i < oContainer.getNumChildContainers(); i++) {
		var oChildContainer = oContainer.getChildContainer(i);
		processContainer(oChildContainer, oAssetMgr, aCompatibilitiesFilter, aArtistsFilter);
		if (oChildContainer.getNumChildContainers() > 0) {
			print( "Container: " + oChildContainer.getContainerName() + ", sub_containers=" + oChildContainer.getNumChildContainers());
		}
		if (oChildContainer.inherits("DzProductAssetContainer"))
		{
			processProduct(oChildContainer, oAssetMgr, aCompatibilitiesFilter, aArtistsFilter);
		}
	}
}

// Define an anonymous function;
// serves as our main loop,
// limits the scope of variables
(function(){

	// Get the asset manager
	var oAssetMgr = App.getAssetMgr();
	// If the manager was not found
	if( !oAssetMgr ){
		// We are done...
		return;
	}

	var aCategoriesFilter = Array();
	aCategoriesFilter.push(categoryToFind);

	var aContentTypesFilter = Array();
	aContentTypesFilter.push(contentTypeToFind);

	var aCompatibilitiesFilter = Array();
//	aCompatibilitiesFilter.push("/Genesis 9/Base");
	aCompatibilitiesFilter.push("/Genesis 8/Female");
	aCompatibilitiesFilter.push("/Genesis 8/Male");
	aCompatibilitiesFilter.push("/Genesis 8.1/Female");
	aCompatibilitiesFilter.push("/Genesis 8.1/Male");

	var aArtistsFilter = Array();
	aArtistsFilter.push("Daz Original");

	var nMaxResults = 1000;
//	var nDefaultMaxResults = oAssetMgr.getMaxFileSearchResultSize();
//	oAssetMgr.setMaxFileSearchResultSize(nMaxResults);
	var oProductsTop = oAssetMgr.searchForProducts("", aCategoriesFilter, aCompatibilitiesFilter, aContentTypesFilter, 0x0, 0 );
//	oAssetMgr.setMaxFileSearchResultSize(nDefaultMaxResults);	

	// If we do not have the products container
	if( !oProductsTop ){
		// We are done...
		return;
	}
	
	while (oProductsTop.getState() == DzTopLevelAssetContainer.csBusy)
	{
		sleep(100);
	}

	var numSearchResults = oProductsTop.getNumChildContainers()
	if (oProductsTop.inherits("DzProductHolderContainer"))
	{
		print("num products = " + numSearchResults);
		processContainer(oProductsTop, oAssetMgr, aCompatibilitiesFilter, aArtistsFilter);
	}

	var oFile = DzFile(G_sScriptPath + "/output.jobs.csv");
	oFile.open(DzFile.WriteOnly);
	for (var i=0; i < G_aOutputBuffer.length; i++)
	{
		oFile.write(G_aOutputBuffer[i] + "\n");
	}
	oFile.close();

	if (numSearchResults == nMaxResults)
	{
		print("WARNING: numSearchResults == nMaxResults, there may be more results than the limit of " + nMaxResults + " results.");
	}
	print("Script Completed.\n");

    return;

// Finalize the function and invoke
})();
