// DAZ Studio version 4.22.0.1 filetype DAZ Script

/**********************************************************************
 
	This script is provided as part of the Daz Script Documentation. The
	contents of this script, and\or any portion thereof, may only be used
	in accordance with the following license:
 
	Creative Commons Attribution 3.0 Unported (CC BY 3.0)
	- http://creativecommons.org/licenses/by/3.0
 
	To contact Daz 3D or for more information about Daz Script visit the
	Daz 3D website:
 
	- http://www.daz3d.com
 
**********************************************************************/
// Source: http://docs.daz3d.com/doku.php/public/software/dazstudio/4/referenceguide/scripting/api_reference/samples/metadata/list_products/start


function processCategories(oProduct) {
	var aCategories = oProduct.getCategories();
	if (aCategories.length == 0) {
		return false;
	}
//	print("Container [" + oContainer.getContainerName() + "] has categories:");
	for (var i = 0; i < aCategories.length; i++) {
//		print("  " + aCategories[i]);
		if (aCategories[i] == "/Default/Figures/People") {
			print("Product: " + oProduct.getContainerName() + "[" +oProduct.token +  "]" + " has category: " + aCategories[i]);
			return true;
		}
	}
	return false;
}

function processContainer(oContainer, oAssetMgr) {
	for (var i = 0; i < oContainer.getNumChildContainers(); i++) {
		var oChildContainer = oContainer.getChildContainer(i);
		processContainer(oChildContainer, oAssetMgr);
		if (oChildContainer.getNumChildContainers() > 0) {
			print( "Container: " + oChildContainer.getContainerName() + ", sub_containers=" + oChildContainer.getNumChildContainers());
		}
		var bIsHumanoidFigure = false;
		if (oChildContainer.inherits("DzProductAssetContainer"))
		{
			bIsHumanoidFigure = processCategories(oChildContainer);
			var bIsInstalled = oChildContainer.isInstalled;
			if (!bIsInstalled) {
				processAssets(oChildContainer, oAssetMgr);
				exit(0);
			}
		}
	}
}

function processAssets(oProduct, oAssetMgr) {
	var totalAssets = oProduct.getNumAssets();
	if (totalAssets == 0) {
		return totalAssets;
	}
	var oAsset = oProduct.getAsset(0);
	var nNonActorAssets = 0;
	var sInstalled = "** NOT INSTALLED **";
	if (oProduct.isInstalled) {
		sInstalled = "__installed__";
		return totalAssets;
	}
	else {
//		return totalAssets;
		var nProductGuid = oProduct.guid;
		oProduct = oAssetMgr.findProductByGuid( nProductGuid );
		oProduct.update();
		var result = oProduct.updateAssets();
		if (!result)
		{
			print("ERROR: unable to update assets for: " + oProduct.getContainerName());
			return totalAssets;
		}
		totalAssets = oProduct.getNumAssets();
	}

	print("==========================================================================");
	print(sInstalled + " Assets in \"" + oProduct.getContainerName() + "\": [" + oProduct.token + "] (" + totalAssets + ")");
	for (var i = 0; i < oProduct.getNumAssets(); i++) {
		var oAsset = oProduct.getAsset(i);
		var spacer = "--";
		if (oAsset.isInstalled) {
			spacer = "++";
		}
		if (oAsset.contentType == "Actor/Character") {
			print(spacer + "[" + (i+1) + "/" + totalAssets + "] [" + oAsset.productID + "] \"" + oAsset.productName + "\", " + oAsset.originalFilename + ", (" + oAsset.contentType + ")");
		}
		else if (oAsset.originalFilename == "") {
			print(spacer + "[" + (i+1) + "/" + totalAssets + "] empty asset...");
			nNonActorAssets++;
		}
		else {
			nNonActorAssets++;
			print(spacer + "[" + (i+1) + "/" + totalAssets + "] non-actor: " + oAsset.originalFilename + ", (" + oAsset.contentType + ")");
		}
	}
	print(spacer + "Non-Actor Assets: total=" + nNonActorAssets);
	print("");

	return totalAssets;
}


// Define an anonymous function;
// serves as our main loop,
// limits the scope of variables
(function(){

	// Get the asset manager
	var oAssetMgr = App.getAssetMgr();
	// If the manager was not found
	if( !oAssetMgr ){
		// We are done...
		return;
	}

    oCategoryTop = oAssetMgr.getCategories();
    print("Categories:");
    for (var i = 0; i < oCategoryTop.getNumChildContainers(); i++) {
        var oCategory = oCategoryTop.getChildContainer(i);
//        print(oCategory.getContainerName() + ", children=" + oCategory.getNumChildContainers());
//        printChildren(oCategory);
    }
//    return;

	// Get the top level asset container for products
	var oProductsTop = oAssetMgr.getProducts();
	// If we do not have the products container
	if( !oProductsTop ){
		// We are done...
		return;
	}
	
    processContainer(oProductsTop, oAssetMgr);

    return;

// Finalize the function and invoke
})();