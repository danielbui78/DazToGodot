"""Blender Convert DTU to VRM

This is a command-line script to import a dtu/fbx intermediate file pair into
Blender and convert it to VRM format for use with VRoid compatible applications
such as VSeeFace.  It will also create GLB versions with 2K and 1K textures if
they were pre-generated by the texture resizer tool and present in the folder
containing the full resolution textures.

Blendshape references should work with ARKit-compatible blendshapes.

- Developed and tested with Blender 3.6.1 (Python 3.10.12)
- Uses modified blender_tools.py module
- Requires Blender 3.6 or later

USAGE: blender.exe --background --python blender_dtu_to_godot.py <fbx file>

EXAMPLE:

    C:/Blender3.6/blender.exe --background --python blender_dtu_to_godot.py C:/Users/dbui/Documents/DazToGodot/Amelia9YoungAdult/Amelia9YoungAdult.fbx

"""
logFilename = "blender_dtu_to_godot.log"

## Do not modify below
def _print_usage():
    # print("Python version: " + str(sys.version))
    print("\nUSAGE: blender.exe --background --python blender_dtu_to_godot.py <fbx file>\n")

from pathlib import Path
script_dir = str(Path( __file__ ).parent.absolute())

import sys
import os
import json
import re
import shutil
try:
    import bpy
except:
    print("DEBUG: blender python libraries not detected, continuing for pydoc mode.")

try:
    import blender_tools
except:
    sys.path.append(script_dir)
    import blender_tools

def _add_to_log(sMessage):
    print(str(sMessage))
    with open(logFilename, "a") as file:
        file.write(sMessage + "\n")

def _main(argv):
    try:
        line = str(argv[-1])
    except:
        _print_usage()
        return

    try:
        start, stop = re.search("#([0-9]*)\.", line).span(0)
        token_id = int(line[start+1:stop-1])
        print(f"DEBUG: token_id={token_id}")
    except:
        print(f"ERROR: unable to parse token_id from '{line}'")
        token_id = 0

    blender_tools.delete_all_items()
    blender_tools.switch_to_layout_mode()

    fbxPath = line.replace("\\","/").strip()
    if (not os.path.exists(fbxPath)):
        _add_to_log("ERROR: main(): fbx file not found: " + str(fbxPath))
        exit()
        return

    # load FBX
    blender_tools.import_fbx(fbxPath)
    blender_tools.fix_eyes()
    blender_tools.fix_scalp()

    blender_tools.center_all_viewports()
    jsonPath = fbxPath.replace(".fbx", ".dtu")
    blender_tools.process_dtu(jsonPath)

    # prepare destination folder path
    blenderFilePath = fbxPath.replace(".fbx", ".blend")
    intermediate_folder_path = os.path.dirname(fbxPath)

    # remove missing images
    for image in bpy.data.images:
        if image.filepath:
            imagePath = bpy.path.abspath(image.filepath)
            if (not os.path.exists(imagePath)):
                bpy.data.images.remove(image)

    # switch to object mode before saving
    bpy.ops.object.mode_set(mode="OBJECT")
    bpy.ops.wm.save_as_mainfile(filepath=blenderFilePath)

    # export to binary gltf (.glb) file
    dtu_dict = blender_tools.process_dtu(jsonPath)
    godot_asset_name = dtu_dict["Asset Name"]
    godot_project_path = dtu_dict["Godot Project Folder"]
    if (godot_project_path == ""):
        godot_project_path = os.path.join(intermediate_folder_path, "godot_project").replace("\\","/")
    godot_asset_type = dtu_dict["Asset Type"]
    _add_to_log("DEBUG: main(): godot_asset_name=" + str(godot_asset_name) 
                + ", godot_project_path=" + str(godot_project_path) 
                + ", godot_asset_type=" + str(godot_asset_type))

    gltf_filename = os.path.basename(fbxPath).replace(".fbx", ".glb")
    destinationPath = os.path.join(godot_project_path, godot_asset_name).replace("\\","/")
    if (not os.path.exists(destinationPath)):
        os.makedirs(destinationPath)
    gltfFilePath = os.path.join(destinationPath, gltf_filename).replace("\\","/")

    # Copy files to godot project folder:    
    if "blend" in godot_asset_type.lower():
        destination_texture_folder = os.path.join(destinationPath, "Textures").replace("\\","/")
        if (not os.path.exists(destination_texture_folder)):
            os.makedirs(destination_texture_folder)
        # copy and re-assign textures
        _add_to_log("DEBUG: copying textures to destination...")
        for image in bpy.data.images:
            if image.filepath:
                imagePath = bpy.path.abspath(image.filepath)
                if (not os.path.exists(imagePath)):
                    bpy.data.images.remove(image)
                else:
                    ## copy to blender destination Folder
                    imageFileName = os.path.basename(imagePath)
                    imageDestinationPath = os.path.join(destination_texture_folder, imageFileName).replace("\\","/")
                    if (os.path.exists(imageDestinationPath)):
                        _add_to_log("DEBUG: image already exists at " + imageDestinationPath + ", deleting...")
                        os.remove(imageDestinationPath)
                    _add_to_log("DEBUG: copying image from " + imagePath + " to " + imageDestinationPath)
                    shutil.copy(imagePath, imageDestinationPath)
                    image.filepath = imageDestinationPath
        # copy .blend file and textures to godo project folder
        blend_destination_path = gltfFilePath.replace(".glb", ".blend")
        bpy.ops.wm.save_as_mainfile(filepath=blend_destination_path)
    elif "glb" in godot_asset_type.lower():
        # save GLB file to godot project folder
        bpy.ops.export_scene.gltf(filepath=gltfFilePath, export_format="GLB", use_visible=True, use_selection=True)
    elif "gltf" in godot_asset_type.lower():
        # save GLTF file to godot project folder, specify textures folder
        bpy.ops.export_scene.gltf(filepath=gltfFilePath.replace(".glb", ".gltf"), export_format="GLTF_SEPARATE", export_texture_dir="Textures", use_visible=True, use_selection=True)

    _add_to_log("DEBUG: main(): completed conversion for: " + str(fbxPath))


# Execute main()
if __name__=='__main__':
    print("Starting script...")
    _add_to_log("Starting script... DEBUG: sys.argv=" + str(sys.argv))
    _main(sys.argv[4:])
    print("script completed.")
    exit(0)
